{"version":3,"sources":["components/Dropdown.js","components/Exchanger.js","components/App.js","index.js"],"names":["Dropdown","items","name","onCurrencyChange","onValueChange","currency","amount","readonly","useState","open","setOpen","selected","setSelected","value","setValue","toggle","alert","useAlert","filterList","filter","toLowerCase","list","document","getElementsByTagName","console","log","i","length","getElementsByClassName","innerHTML","indexOf","style","display","className","onBlur","event","input","target","isNaN","show","onChange","readOnly","onClick","undefined","image","src","alt","color","id","ticker","toUpperCase","type","placeholder","onKeyUp","map","item","handleOnClick","clickOutsideConfig","handleClickOutside","props","onClickOutside","api_key","Exchanger","setList","fromCurrency","setFromCurrency","toCurrency","setToCurrency","fromValue","setFromValue","setToValue","minAmount","setMinAmount","estimatedAmount","setEstimatedAmount","prevAmount","ref","useRef","useEffect","current","usePrevious","a","fetch","response","json","state","useAsync","getEstimatedAmount","exchange","url","obj","data","JSON","stringify","parse","getMinAmount","handleCurrencyChange","handleValueChange","options","position","timeout","transition","App","template","AlertTemplate","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f85979a6.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {IoIosArrowDown} from \"react-icons/io\";\r\nimport {AiOutlineClose} from \"react-icons/ai\";\r\nimport onClickOutside from 'react-onclickoutside';\r\nimport {useAlert} from 'react-alert'\r\n\r\n\r\nfunction Dropdown({items, name, onCurrencyChange, onValueChange, currency, amount, readonly}) {\r\n    const [open, setOpen] = useState(false);\r\n    const [selected, setSelected] = useState(currency);\r\n    const [value, setValue] = useState(amount);\r\n    const toggle = () => setOpen(!open);\r\n    const alert = useAlert();\r\n\r\n    Dropdown['handleClickOutside_' + name] = () => setOpen(false);\r\n\r\n    function handleOnClick(item) {\r\n        setSelected(item);\r\n        setOpen(false);\r\n        onCurrencyChange(name, item);\r\n    }\r\n\r\n    function handleOnChange(event) {\r\n        let input = event.target.value;\r\n        if (name === 'to') {\r\n            input = \"\";\r\n        }\r\n        setValue(input);\r\n    }\r\n\r\n    function handleOnFocus(event) {\r\n        let input = event.target.value;\r\n        if ((!isNaN(input) && input > 0) || input === \"\")\r\n            onValueChange(name, value);\r\n        else {\r\n            setValue(\"\");\r\n            alert.show(\"input is invalid\");\r\n        }\r\n    }\r\n\r\n    function search(event) {\r\n        filterList(event.target.value);\r\n    }\r\n\r\n    const filterList = filter => {\r\n        filter = filter.toLowerCase();\r\n        let list = document.getElementsByTagName('li');\r\n        console.log(list);\r\n        for (let i = 0; i < list.length; i++) {\r\n            let button = list[i].getElementsByClassName(\"button-list-item\")[0];\r\n            let span = button.getElementsByClassName(\"button-item-content\")[1];\r\n            let ticker = span.innerHTML;\r\n            if (ticker.toLowerCase().indexOf(filter) === 0)\r\n                list[i].style.display = 'list-item';\r\n            else\r\n                list[i].style.display = 'none';\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"dd-wrapper\">\r\n            <div className=\"dd-header\">\r\n                <input className=\"currency-amount\" onBlur={handleOnFocus} value={value} onChange={handleOnChange}\r\n                       readOnly={readonly}/>\r\n                <div className=\"currency-div pointer\" onClick={() => toggle(!open)}>\r\n                    {selected !== undefined && selected.image !== undefined &&\r\n                    <img src={selected.image} alt=\"new\" color=\"#11b3fe\" className=\"button-item-content\"/>\r\n                    }\r\n                    <div\r\n                        id=\"currency-ticker\">{selected !== undefined && selected.ticker !== undefined && selected.ticker.toUpperCase()}</div>\r\n                    <IoIosArrowDown color=\"8FADBE\" id=\"arrow-icon\"/>\r\n                </div>\r\n            </div>\r\n\r\n            {open && (\r\n                <div className=\"dd\">\r\n                    <div id=\"search-div\">\r\n                        <input type=\"text\" placeholder=\"Search\" id=\"currency-search-input\" onKeyUp={search}/>\r\n                        <AiOutlineClose color=\"8FADBE\" className=\"cancel-button pointer\"\r\n                                        onClick={() => toggle(!open)}/>\r\n                    </div>\r\n                    <ul className=\"dd-list\">\r\n                        {items.map(item => (\r\n                            <li className=\"dd-list-item\" key={item.id}>\r\n                                <button onClick={() => handleOnClick(item)} className=\"button-list-item\">\r\n                                    <img src={item.image} alt=\"new\" color=\"#11b3fe\" className=\"button-item-content\"/>\r\n                                    <span className=\"button-item-content\">{item.ticker.toUpperCase()}</span>\r\n                                    <span className=\"button-item-content full-currency-name\">{item.name}</span>\r\n                                </button>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n\r\n            )}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst clickOutsideConfig = {\r\n    handleClickOutside: ({props}) => Dropdown['handleClickOutside_' + props.name]\r\n};\r\n\r\nexport default onClickOutside(Dropdown, clickOutsideConfig);","import React, {useState, useEffect, useRef} from 'react';\r\nimport SelectBox from \"./Dropdown\";\r\nimport {FaExchangeAlt} from \"react-icons/fa\"\r\nimport {useAsync} from 'react-use';\r\nimport {useAlert} from 'react-alert';\r\n\r\n\r\nconst usePrevious = (value) => {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n};\r\nconst api_key ='?api_key=c9155859d90d239f909d2906233816b26cd8cf5ede44702d422667672b58b0cd';\r\n\r\nexport default function Exchanger() {\r\n\r\n    const [list, setList] = useState([]);\r\n    const [fromCurrency, setFromCurrency] = useState({});\r\n    const [toCurrency, setToCurrency] = useState();\r\n    const [fromValue, setFromValue] = useState(\"\");\r\n    const [toValue, setToValue] = useState(\"\");\r\n    const [minAmount, setMinAmount] = useState(\"\");\r\n    const [estimatedAmount, setEstimatedAmount] = useState(\"\");\r\n    const prevAmount = usePrevious(minAmount);\r\n    const alert = useAlert();\r\n\r\n\r\n    async function getCurrency() {\r\n        const response = await fetch('https://api.changenow.io/v1/currencies?active=true&fixedRate=true');\r\n        return await response.json();\r\n    }\r\n\r\n    const state = useAsync(getCurrency);\r\n\r\n    useEffect(() => {\r\n        if (state.value)\r\n            setList(state.value)\r\n    }, [state.value]);\r\n\r\n\r\n    async function getEstimatedAmount(value) {\r\n        if (fromCurrency !== undefined && toCurrency !== undefined && (fromValue !== undefined || fromValue !== \"\" || fromValue === minAmount)) {\r\n            const exchange = fromCurrency.ticker + \"_\" + toCurrency.ticker;\r\n            const url = 'https://api.changenow.io/v1/exchange-amount/'\r\n                + value + '/'\r\n                + exchange\r\n                + api_key;\r\n            const response = await fetch(url);\r\n            const obj = await response.json();\r\n            if (obj.estimatedAmount !== undefined) {\r\n                setEstimatedAmount(obj.estimatedAmount);\r\n            } else {\r\n                alert.show(\"pair is disabled\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    async function getMinAmount() {\r\n        const exchange = fromCurrency.ticker + \"_\" + toCurrency.ticker;\r\n        const url = 'https://api.changenow.io/v1/min-amount/'\r\n            + exchange\r\n            + api_key;\r\n        const response = await fetch(url);\r\n        let data = await response.json();\r\n        data = JSON.stringify(data);\r\n        let obj = JSON.parse(data);\r\n        if (obj.minAmount) {\r\n            setMinAmount(obj.minAmount);\r\n        } else {\r\n            alert.show(\"pair is disabled\");\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (fromCurrency !== undefined && toCurrency !== undefined) {\r\n            setMinAmount(\"\");\r\n            setEstimatedAmount(\"\");\r\n            getMinAmount(true);\r\n        }\r\n    }, [fromCurrency, toCurrency]);\r\n\r\n    useEffect(() => {\r\n        if (fromCurrency !== undefined && toCurrency !== undefined) {\r\n            if (fromValue >= minAmount) {\r\n                getEstimatedAmount(fromValue);\r\n            } else {\r\n                setEstimatedAmount(\"-\");\r\n                alert.show(\"amount is less than min\")\r\n            }\r\n\r\n        }\r\n    }, [fromValue]);\r\n\r\n    useEffect(() => {\r\n        if (fromCurrency !== undefined && toCurrency !== undefined && prevAmount !== minAmount) {\r\n            if (minAmount !== \"\") {\r\n                if (fromValue !== '' && prevAmount !== \"\") {\r\n                    if (fromValue < minAmount) {\r\n                        setEstimatedAmount(\"-\");\r\n                        alert.show(\"amount is less than min\")\r\n                    } else {\r\n                        getEstimatedAmount(fromValue);\r\n                    }\r\n                } else {\r\n                    getEstimatedAmount(minAmount)\r\n                }\r\n            }\r\n        }\r\n\r\n    }, [minAmount, prevAmount]);\r\n\r\n    useEffect(() => {\r\n        setToValue(estimatedAmount);\r\n    }, [estimatedAmount]);\r\n\r\n    const handleCurrencyChange = (name, item) => {\r\n        switch (name) {\r\n            case \"from\":\r\n                setFromCurrency(item);\r\n                break;\r\n            case \"to\":\r\n                setToCurrency(item);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleValueChange = (name, value) => {\r\n        switch (name) {\r\n            case \"from\":\r\n                setFromValue(value);\r\n                break;\r\n            case \"to\":\r\n                setToValue(value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"exchange-container\">\r\n            <div id=\"header\">\r\n                Crypto Exchange\r\n            </div>\r\n            <div id=\"description\">Exchange fast and easy</div>\r\n            <div id=\"from\">\r\n                <SelectBox name=\"from\"\r\n                           items={list}\r\n                           onCurrencyChange={handleCurrencyChange}\r\n                           onValueChange={handleValueChange}\r\n                           amount={minAmount}\r\n                           currency={fromCurrency}\r\n                           key={minAmount}\r\n                           readonly={false}/>\r\n            </div>\r\n            <FaExchangeAlt color=\"#11b3fe\" id=\"exchange\"/>\r\n            <div id=\"to\">\r\n                <SelectBox name=\"to\"\r\n                           items={list}\r\n                           onCurrencyChange={handleCurrencyChange}\r\n                           onValueChange={handleValueChange}\r\n                           amount={estimatedAmount}\r\n                           currency={toCurrency}\r\n                           key={estimatedAmount}\r\n                           readonly={true}\r\n                />\r\n            </div>\r\n            <div id=\"address\">Your Ethereum address</div>\r\n            <div id=\"address-input\">\r\n                <input/>\r\n            </div>\r\n            <div id=\"exchange-button\">\r\n                <button>EXCHANGE</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport '../css/app.css';\nimport '../css/button.css';\nimport '../css/dropdown.css';\nimport '../css/exchanger.css';\nimport Exchanger from \"./Exchanger\";\nimport {Provider as AlertProvider } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\n\nconst options = {\n    position: 'bottom right',\n    timeout: 5000,\n    /*offset: '30px',*/\n    transition: 'scale',\n    type: 'error',\n};\n\nfunction App() {\n    return (\n        <AlertProvider template={AlertTemplate} {...options}>\n            <div className=\"App\" >\n                <Exchanger/>\n            </div>\n        </AlertProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"@fontsource/vollkorn\"\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}